{
  "build_jwt": {
    "prefix": "build_jwt",
    "body": [
      "@Value(\"${application.token.secret-key}\")",
      "private String secretKey;",
      "",
      "//parse jwt",
      "private Claims extractAllClaims(String token) {",
      "    try {",
      "        return Jwts.parser()",
      "                .setSigningKey(getSignInKey())",
      "                .build()",
      "                .parseClaimsJws(token)",
      "                .getBody();",
      "    } catch (ExpiredJwtException | MalformedJwtException | UnsupportedJwtException | SecurityException",
      "            | IllegalArgumentException e) {",
      "        log.info(e.getMessage());",
      "        return null;",
      "    }",
      "}",
      "",
      "private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {",
      "    try {",
      "        final Claims claims = extractAllClaims(token);",
      "        return claimsResolver.apply(claims);",
      "    } catch (Exception e) {",
      "        return null;",
      "    }",
      "}",
      "",
      "public String extractUsername(String token) {",
      "    return extractClaim(token, Claims::getSubject);",
      "}",
      "",
      "public Date extractExpiration(String token) {",
      "    return extractClaim(token, Claims::getExpiration);",
      "}",
      "",
      "// build jwt",
      "private Key getSignInKey() {",
      "    byte[] keyBytes = Decoders.BASE64.decode(secretKey);",
      "    return Keys.hmacShaKeyFor(keyBytes);",
      "}",
      "",
      "private String buildTokenApp(Map<String, Object> extraClaims, UserDetails userDetails, long expiration) {",
      "    return Jwts.builder()",
      "            .setClaims(extraClaims)",
      "            .setSubject(userDetails.getUsername())",
      "            .setIssuedAt(new Date(System.currentTimeMillis()))",
      "            .setExpiration(new Date(System.currentTimeMillis() + expiration))",
      "            .signWith(getSignInKey(), SignatureAlgorithm.HS256)",
      "            .compact();",
      "}",
      "",
      "private String generateToken(UserDetails userDetails, long expiration) {",
      "    return buildTokenApp(new HashMap<>(), userDetails, expiration);",
      "}"
    ]
  },
  "google_sheet_check_accout": {
    "prefix": "google_sheet_check_accout",
    "body": [
      "private static final String APPLICATION_NAME = \"ApiAppsheet\";",
      "private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();",
      "private static final String TOKENS_DIRECTORY_PATH = \"tokens\";",
      "// ===================================",
      "private static final List<String> SCOPES = Arrays.asList(SheetsScopes.SPREADSHEETS, SheetsScopes.DRIVE);",
      "private static final String CREDENTIALS_FILE_PATH = \"/credentials.json\";",
      "",
      "// =====================================",
      "private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {",
      "    // Load client secrets.",
      "    InputStream in = Util.class.getResourceAsStream(CREDENTIALS_FILE_PATH);",
      "    if (in == null) {",
      "        throw new FileNotFoundException(\"Resource not found: \" + CREDENTIALS_FILE_PATH);",
      "    }",
      "    GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));",
      "",
      "    // Build flow and trigger user authorization request.",
      "    GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(",
      "            HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)",
      "            .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))",
      "            .setAccessType(\"offline\")",
      "            .setApprovalPrompt(\"force\")",
      "            .build();",
      "    LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();",
      "    return new AuthorizationCodeInstalledApp(flow, receiver).authorize(\"user\");",
      "}",
      "",
      "private static Sheets getService() {",
      "    try {",
      "        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();",
      "        Sheets service = new Sheets.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))",
      "                .setApplicationName(APPLICATION_NAME)",
      "                .build();",
      "        return service;",
      "    } catch (GeneralSecurityException | IOException e) {",
      "        log.info(e.getMessage());",
      "        return null;",
      "    }",
      "}"
    ]
  },
  "google_sheet_create_spread_sheet": {
    "prefix": "google_sheet_create_spread_sheet",
    "body": [
      "public String createSpreadsheet(String title_spreadSheet, String title_sheet) throws IOException {",
      "    Sheets service = getService();",
      "    Spreadsheet spreadsheet = new Spreadsheet()",
      "            .setProperties(new SpreadsheetProperties().setTitle(title_sheet))",
      "            .setSheets(Arrays.asList(new Sheet().setProperties(new SheetProperties().setTitle(title_sheet))));",
      "    try {",
      "        if (service != null) {",
      "            spreadsheet = service.spreadsheets().create(spreadsheet).execute();",
      "            return \"ID: \" + spreadsheet.getSpreadsheetId() + \"-\" + \"URL: \" + spreadsheet.getSpreadsheetUrl();",
      "        }",
      "        return null;",
      "    } catch (IOException e) {",
      "        log.info(e.getMessage());",
      "        return null;",
      "    }",
      "}"
    ]
  },
  "google_sheet_update_value": {
    "prefix": "google_sheet_update_value",
    "body": [
      "public UpdateValuesResponse updateValue(String sheetId, String range, String valueInputOption, List<List<Object>> values) throws IOException {",
      "    Sheets service = getService();",
      "    UpdateValuesResponse result = null;",
      "    try {",
      "        ValueRange body = new ValueRange()",
      "                .setValues(values);",
      "        result = service.spreadsheets().values().update(sheetId, range, body)",
      "                .setValueInputOption(valueInputOption)",
      "                .execute();",
      "        System.out.printf(\"%d cells updated.\", result.getUpdatedCells());",
      "    } catch (GoogleJsonResponseException e) {",
      "        GoogleJsonError error = e.getDetails();",
      "        if (error.getCode() == 404) {",
      "            System.out.printf(\"Spreadsheet not found with id '%s'.\\n\", sheetId);",
      "        } else {",
      "            throw e;",
      "        }",
      "    }",
      "    return result;",
      "}"
    ]
  },
  "google_sheet_append_value": {
    "prefix": "google_sheet_append_value",
    "body": [
      "public AppendValuesResponse appendValue(String sheetId, String range, String valueInputOption, List<List<Object>> values) throws IOException {",
      "    Sheets service = getService();",
      "    AppendValuesResponse result = null;",
      "    try {",
      "        ValueRange body = new ValueRange()",
      "                .setValues(values);",
      "        result = service.spreadsheets().values().append(sheetId, range, body)",
      "                .setValueInputOption(valueInputOption)",
      "                .execute();",
      "        System.out.printf(\"%d cells updated.\", result.getUpdates().getUpdatedCells());",
      "    } catch (GoogleJsonResponseException e) {",
      "        GoogleJsonError error = e.getDetails();",
      "        if (error.getCode() == 404) {",
      "            System.out.printf(\"Spreadsheet not found with id '%s'.\\n\", sheetId);",
      "        } else {",
      "            throw e;",
      "        }",
      "    }",
      "    return result;",
      "}"
    ]
  },
  "google_sheet_delete_dimension": {
    "prefix": "google_sheet_delete_dimension",
    "body": [
      "public void DeleteDimension(String spreadSheetId, int sheetId, String DimensionRange) {",
      "    Sheets service = getService();",
      "    DeleteDimensionRequest deleteRequest = new DeleteDimensionRequest()",
      "            .setRange(",
      "                    new DimensionRange()",
      "                            .setSheetId(sheetId)",
      "                            .setDimension(DimensionRange)",
      "                            .setStartIndex(0)",
      "                            .setEndIndex(2));",
      "",
      "    List<Request> requests = new ArrayList<>();",
      "    requests.add(new Request().setDeleteDimension(deleteRequest));",
      "",
      "    BatchUpdateSpreadsheetRequest body = new BatchUpdateSpreadsheetRequest().setRequests(requests);",
      "    try {",
      "        service.spreadsheets().batchUpdate(spreadSheetId, body).execute();",
      "    } catch (IOException e) {",
      "        // TODO Auto-generated catch block",
      "    }",
      "}"
    ]
  },
  "google_sheet_add_dimension": {
    "prefix": "google_sheet_add_dimension",
    "body": [
      "public void AddDimension(String spreadSheetId, int sheetId, String dimensionRange) {",
      "    Sheets service = getService();",
      "    InsertDimensionRequest insertRequest = new InsertDimensionRequest()",
      "            .setRange(",
      "                    new DimensionRange()",
      "                            .setSheetId(sheetId)",
      "                            .setDimension(dimensionRange)",
      "                            .setStartIndex(0)",
      "                            .setEndIndex(1));",
      "",
      "    List<Request> requests = new ArrayList<>();",
      "    requests.add(new Request().setInsertDimension(insertRequest));",
      "",
      "    BatchUpdateSpreadsheetRequest body = new BatchUpdateSpreadsheetRequest().setRequests(requests);",
      "    try {",
      "        service.spreadsheets().batchUpdate(spreadSheetId, body).execute();",
      "    } catch (IOException e) {",
      "        e.printStackTrace();",
      "    }",
      "}"
    ]
  },
  "google_sheet_get_info": {
    "prefix": "google_sheet_get_info",
    "body": [
      "public void getInfo(String spreadSheetId) {",
      "    Sheets service = getService();",
      "    Spreadsheet spreadsheet = null;",
      "    try {",
      "        spreadsheet = service.spreadsheets().get(spreadSheetId).execute();",
      "    } catch (IOException e) {",
      "        // TODO Auto-generated catch block",
      "        e.printStackTrace();",
      "    }",
      "",
      "    // Display overall information of the spreadsheet",
      "    System.out.println(\"Spreadsheet ID: \" + spreadsheet.getSpreadsheetId());",
      "    System.out.println(\"Spreadsheet URL: \" + spreadsheet.getSpreadsheetUrl());",
      "    System.out.println(\"Number of sheets: \" + spreadsheet.getSheets().size());",
      "",
      "    // Display information for each sheet",
      "    List<Sheet> sheets = spreadsheet.getSheets();",
      "    for (Sheet sheet : sheets) {",
      "        System.out.println(\"Sheet Title: \" + sheet.getProperties().getTitle());",
      "        System.out.println(\"Sheet ID: \" + sheet.getProperties().getSheetId());",
      "        System.out.println(\"Grid Properties: \");",
      "        System.out.println(\"\tRow count: \" + sheet.getProperties().getGridProperties().getRowCount());",
      "        System.out.println(\"\tColumn count: \" + sheet.getProperties().getGridProperties().getColumnCount());",
      "        System.out.println(\"------------------------------------------------\");",
      "        ValueRange response = null;",
      "        try {",
      "            response = service.spreadsheets().values()",
      "                    .get(spreadSheetId, sheet.getProperties().getTitle())",
      "                    .execute();",
      "        } catch (IOException e) {",
      "            // TODO Auto-generated catch block",
      "            e.printStackTrace();",
      "        }",
      "        List<List<Object>> values = response.getValues();",
      "        if (values != null && !values.isEmpty()) {",
      "            System.out.println(\"Data:\");",
      "            int rowCount = 0;",
      "            int columnCount = values.get(0).size();",
      "            for (List<Object> row : values) {",
      "                rowCount++;",
      "                for (Object cell : row) {",
      "                    System.out.print(cell + \"\\t\");",
      "                }",
      "                System.out.println();",
      "            }",
      "            System.out.println(\"Number of data rows: \" + rowCount);",
      "            int nonEmptyColumnCount = 0;",
      "            for (int i = 0; i < columnCount; i++) {",
      "                if (!isColumnEmpty(values, i)) {",
      "                    nonEmptyColumnCount++;",
      "                }",
      "            }",
      "            System.out.println(\"Number of data columns: \" + (columnCount - (columnCount - nonEmptyColumnCount)));",
      "        } else {",
      "            System.out.println(\"No data found.\");",
      "        }",
      "",
      "        System.out.println(\"------------------------------------------------\");",
      "    }",
      "}",
      "",
      "private boolean isColumnEmpty(List<List<Object>> values, int columnIndex) {",
      "    for (List<Object> row : values) {",
      "        if (row.size() <= columnIndex || row.get(columnIndex) == null",
      "                || row.get(columnIndex).toString().isEmpty()) {",
      "            return true;",
      "        }",
      "    }",
      "    return false;",
      "}"
    ]
  }
}
